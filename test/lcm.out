@main
	op: id   		dest: greater		type: int		args: ["y"]	
	op: gt   		dest: v4		type: bool		args: ["x", "y"]	
	op: br   		args: ["v4"]		labels: ["then.1", "else.1"]
.then.1
	op: id   		dest: greater		type: int		args: ["x"]	
	op: jmp  		labels: ["endif.1"]
.else.1
.endif.1
.foreverloop
	op: call 		dest: modX		type: int		args: ["greater", "x"]		funcs: ["getMod"]
	op: call 		dest: modY		type: int		args: ["greater", "y"]		funcs: ["getMod"]
	op: const		dest: zero		type: int		value: 0	
	op: eq   		dest: xZero		type: bool		args: ["modX", "zero"]	
	op: eq   		dest: yZero		type: bool		args: ["modY", "zero"]	
	op: and  		dest: bothZero		type: bool		args: ["xZero", "yZero"]	
	op: br   		args: ["bothZero"]		labels: ["then.2", "else.2"]
.then.2
	op: print		args: ["greater"]	
	op: jmp  		labels: ["loopend"]
.else.2
	op: const		dest: one		type: int		value: 1	
	op: add  		dest: greater		type: int		args: ["greater", "one"]	
	op: jmp  		labels: ["foreverloop"]
.loopend
@getMod
	op: div  		dest: divisor		type: int		args: ["val", "mod"]	
	op: mul  		dest: multiple		type: int		args: ["divisor", "mod"]	
	op: sub  		dest: rem		type: int		args: ["val", "multiple"]	
	op: ret  		args: ["rem"]	
