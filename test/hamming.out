@lsb
	op: const		dest: two		type: int		value: 2	
	op: div  		dest: div		type: int		args: ["val", "two"]	
	op: mul  		dest: mul		type: int		args: ["div", "two"]	
	op: sub  		dest: lsb		type: int		args: ["val", "mul"]	
	op: ret  		args: ["lsb"]	
@hamm_lsb
	op: const		dest: zero		type: int		value: 0	
	op: const		dest: one		type: int		value: 1	
	op: call 		dest: a_lsb		type: int		args: ["a"]		funcs: ["lsb"]
	op: call 		dest: b_lsb		type: int		args: ["b"]		funcs: ["lsb"]
	op: add  		dest: xor		type: int		args: ["a_lsb", "b_lsb"]	
	op: eq   		dest: guard		type: bool		args: ["xor", "one"]	
	op: br   		args: ["guard"]		labels: ["if", "else"]
.if
	op: ret  		args: ["one"]	
.else
	op: ret  		args: ["zero"]	
@main
	op: const		dest: zero		type: int		value: 0	
	op: const		dest: two		type: int		value: 2	
	op: const		dest: dist		type: int		value: 0	
.while
	op: eq   		dest: a_done		type: bool		args: ["a", "zero"]	
	op: eq   		dest: b_done		type: bool		args: ["b", "zero"]	
	op: and  		dest: done		type: bool		args: ["a_done", "b_done"]	
	op: br   		args: ["done"]		labels: ["end", "body"]
.body
	op: call 		dest: hamm		type: int		args: ["a", "b"]		funcs: ["hamm_lsb"]
	op: add  		dest: dist		type: int		args: ["dist", "hamm"]	
	op: div  		dest: a 		type: int		args: ["a", "two"]	
	op: div  		dest: b 		type: int		args: ["b", "two"]	
	op: jmp  		labels: ["while"]
.end
	op: print		args: ["dist"]	
	op: ret  	
