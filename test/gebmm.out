@main
	op: const		dest: one		type: int		value: 1	
	op: const		dest: i 		type: int		value: -1	
	op: const		dest: output		type: int		value: 0	
.row_loop
	op: const		dest: j 		type: int		value: -1	
	op: add  		dest: i 		type: int		args: ["i", "one"]	
	op: lt   		dest: i_lt_dim1		type: bool		args: ["i", "dim1"]	
	op: br   		args: ["i_lt_dim1"]		labels: ["col_loop", "return"]
.col_loop
	op: const		dest: k 		type: int		value: -1	
	op: add  		dest: j 		type: int		args: ["j", "one"]	
	op: const		dest: dot_product		type: int		value: 0	
	op: lt   		dest: j_lt_dim3		type: bool		args: ["j", "dim3"]	
	op: br   		args: ["j_lt_dim3"]		labels: ["inner_loop", "row_loop"]
.inner_loop
	op: add  		dest: k 		type: int		args: ["k", "one"]	
	op: lt   		dest: k_lt_dim2		type: bool		args: ["k", "dim2"]	
	op: br   		args: ["k_lt_dim2"]		labels: ["multiply", "end_col"]
.multiply
	op: call 		dest: a_bit		type: int		args: ["a", "dim2", "i", "k"]		funcs: ["mat_bitsel"]
	op: call 		dest: b_bit		type: int		args: ["b", "dim3", "k", "j"]		funcs: ["mat_bitsel"]
	op: mul  		dest: a_bit_b_bit		type: int		args: ["a_bit", "b_bit"]	
	op: add  		dest: dot_product		type: int		args: ["dot_product", "a_bit_b_bit"]	
	op: jmp  		labels: ["inner_loop"]
.end_col
	op: call 		dest: dot_product_odd		type: bool		args: ["dot_product"]		funcs: ["is_odd"]
	op: br   		args: ["dot_product_odd"]		labels: ["add_dp", "col_loop"]
.add_dp
	op: call 		dest: index		type: int		args: ["i", "j", "dim3"]		funcs: ["mat_packed_index"]
	op: call 		dest: dp_bit		type: int		args: ["index"]		funcs: ["pow2"]
	op: add  		dest: output		type: int		args: ["output", "dp_bit"]	
	op: jmp  		labels: ["col_loop"]
.return
	op: print		args: ["output"]	
@mat_bitsel
	op: call 		dest: index		type: int		args: ["i", "j", "cols"]		funcs: ["mat_packed_index"]
	op: call 		dest: ret_val		type: bool		args: ["m", "index"]		funcs: ["bitsel"]
	op: br   		args: ["ret_val"]		labels: ["ret_one", "ret_zero"]
.ret_one
	op: const		dest: one		type: int		value: 1	
	op: ret  		args: ["one"]	
.ret_zero
	op: const		dest: zero		type: int		value: 0	
	op: ret  		args: ["zero"]	
@mat_packed_index
	op: mul  		dest: index		type: int		args: ["i", "cols"]	
	op: add  		dest: index		type: int		args: ["index", "j"]	
	op: ret  		args: ["index"]	
@pow2
	op: const		dest: one		type: int		value: 1	
	op: const		dest: two		type: int		value: 2	
	op: const		dest: i 		type: int		value: 0	
	op: const		dest: result		type: int		value: 1	
.loop
	op: lt   		dest: i_lt_n		type: bool		args: ["i", "n"]	
	op: br   		args: ["i_lt_n"]		labels: ["multiply", "return"]
.multiply
	op: mul  		dest: result		type: int		args: ["result", "two"]	
	op: add  		dest: i 		type: int		args: ["i", "one"]	
	op: jmp  		labels: ["loop"]
.return
	op: ret  		args: ["result"]	
@bitsel
	op: const		dest: zero		type: int		value: 0	
	op: const		dest: one		type: int		value: 1	
	op: const		dest: two		type: int		value: 2	
.loop
	op: eq   		dest: i_eq_zero		type: bool		args: ["i", "zero"]	
	op: br   		args: ["i_eq_zero"]		labels: ["return", "divide"]
.divide
	op: div  		dest: m 		type: int		args: ["m", "two"]	
	op: sub  		dest: i 		type: int		args: ["i", "one"]	
	op: jmp  		labels: ["loop"]
.return
	op: call 		dest: m_bit		type: bool		args: ["m"]		funcs: ["is_odd"]
	op: ret  		args: ["m_bit"]	
@abs
	op: const		dest: zero		type: int		value: 0	
	op: lt   		dest: is_neg		type: bool		args: ["n", "zero"]	
	op: br   		args: ["is_neg"]		labels: ["negative", "positive"]
.negative
	op: sub  		dest: n 		type: int		args: ["zero", "n"]	
.positive
	op: ret  		args: ["n"]	
@is_even
	op: call 		dest: n0		type: int		args: ["n"]		funcs: ["abs"]
	op: const		dest: one		type: int		value: 1	
	op: const		dest: two		type: int		value: 2	
	op: add  		dest: np1		type: int		args: ["n0", "one"]	
	op: div  		dest: half		type: int		args: ["n0", "two"]	
	op: div  		dest: np1_half		type: int		args: ["np1", "two"]	
	op: eq   		dest: ret_val		type: bool		args: ["half", "np1_half"]	
	op: ret  		args: ["ret_val"]	
@is_odd
	op: call 		dest: is_even		type: bool		args: ["n"]		funcs: ["is_even"]
	op: not  		dest: ret_val		type: bool		args: ["is_even"]	
	op: ret  		args: ["ret_val"]	
