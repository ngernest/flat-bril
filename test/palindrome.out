@main
	op: const		dest: ten		type: int		value: 10	
	op: const		dest: zero		type: int		value: 0	
	op: const		dest: one		type: int		value: 1	
	op: const		dest: index		type: int		value: 1	
	op: const		dest: not_finished		type: bool		value: true	
.for.cond
	op: br   		args: ["not_finished"]		labels: ["for.body", "for.end"]
.for.body
	op: call 		dest: power		type: int		args: ["ten", "index"]		funcs: ["pow"]
	op: div  		dest: d 		type: int		args: ["in", "power"]	
	op: eq   		dest: check		type: bool		args: ["d", "zero"]	
	op: br   		args: ["check"]		labels: ["if.true", "if.false"]
.if.true
	op: const		dest: not_finished		type: bool		value: false	
	op: jmp  		labels: ["for.cond"]
.if.false
	op: add  		dest: index		type: int		args: ["index", "one"]	
	op: jmp  		labels: ["for.cond"]
.for.end
	op: sub  		dest: exp		type: int		args: ["index", "one"]	
	op: call 		dest: is_palindrome		type: bool		args: ["in", "exp"]		funcs: ["palindrome"]
	op: print		args: ["is_palindrome"]	
@pow
	op: const		dest: res		type: int		value: 1	
	op: const		dest: zero		type: int		value: 0	
	op: const		dest: one		type: int		value: 1	
	op: const		dest: not_finished		type: bool		value: true	
.for.cond.pow
	op: br   		args: ["not_finished"]		labels: ["for.body.pow", "for.end.pow"]
.for.body.pow
	op: eq   		dest: finished		type: bool		args: ["exp", "zero"]	
	op: br   		args: ["finished"]		labels: ["if.true.pow", "if.false.pow"]
.if.true.pow
	op: const		dest: not_finished		type: bool		value: false	
	op: jmp  		labels: ["for.cond.pow"]
.if.false.pow
	op: mul  		dest: res		type: int		args: ["res", "base"]	
	op: sub  		dest: exp		type: int		args: ["exp", "one"]	
	op: jmp  		labels: ["for.cond.pow"]
.for.end.pow
	op: ret  		args: ["res"]	
@palindrome
	op: const		dest: is_palindrome		type: bool		value: false	
	op: const		dest: zero		type: int		value: 0	
	op: const		dest: two		type: int		value: 2	
	op: const		dest: ten		type: int		value: 10	
	op: le   		dest: check		type: bool		args: ["len", "zero"]	
	op: br   		args: ["check"]		labels: ["if.true.palindrome", "if.false.palindrome"]
.if.true.palindrome
	op: const		dest: is_palindrome		type: bool		value: true	
	op: jmp  		labels: ["if.end.palindrome"]
.if.false.palindrome
	op: call 		dest: power		type: int		args: ["ten", "len"]		funcs: ["pow"]
	op: div  		dest: left		type: int		args: ["in", "power"]	
	op: div  		dest: v1		type: int		args: ["in", "ten"]	
	op: mul  		dest: v2		type: int		args: ["v1", "ten"]	
	op: sub  		dest: right		type: int		args: ["in", "v2"]	
	op: eq   		dest: is_equal		type: bool		args: ["left", "right"]	
	op: br   		args: ["is_equal"]		labels: ["if.true.mirror", "if.false.mirror"]
.if.true.mirror
	op: mul  		dest: temp		type: int		args: ["power", "left"]	
	op: sub  		dest: temp		type: int		args: ["in", "temp"]	
	op: sub  		dest: temp		type: int		args: ["temp", "right"]	
	op: div  		dest: next_in		type: int		args: ["temp", "ten"]	
	op: sub  		dest: next_len		type: int		args: ["len", "two"]	
	op: call 		dest: is_palindrome		type: bool		args: ["next_in", "next_len"]		funcs: ["palindrome"]
	op: jmp  		labels: ["if.end.palindrome"]
.if.false.mirror
	op: const		dest: is_palindrome		type: bool		value: false	
	op: jmp  		labels: ["if.end.palindrome"]
.if.end.palindrome
	op: ret  		args: ["is_palindrome"]	
